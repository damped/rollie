{"name":"Rollie","tagline":"Self Balancing Robot","body":"# rollie\r\nSelf Balancing Robot\r\n\r\n\r\nThis is the place for a high level discription of the code and what its for\r\n\r\n## Compiling\r\nDepriciated: for now, run `g++ getangle.c -lwiringPi -o run` in the src directory.\r\n\r\nThe new makefile system allows us to easaly compile all the files togeter. It does some fancy things like only compileing what was changed, and allows us to install the program in the `~/bin` folder. This means that when you type `rollie` from anywher it will exicute the program.\r\n\r\nFor testing run:\r\n```\r\nmake\r\n./rollie\r\n```\r\n\r\nWhen you wish to install:\r\n```\r\nmake install\r\n./rollie\r\n```\r\n\r\nBefore you commit run:\r\n```\r\nmake clean\r\ngit add *    #or any spicific files to add to the commit\r\ngit commit -m \"message\"\r\ngit push\r\n```\r\nMaybe we will add that last part to make so we just need to do something like `make commit` idk...\r\n\r\n\r\n## Getting angles\r\nThe gyroscope is located at 0x68 and returns a device id of 0x69\r\nThe acceleromiter is located at 0x53 and returns a device id of 0xE5\r\n\r\n### PID controller\r\nThe PID controller is provided by a github libary. https://github.com/cvra/pid\r\n\r\n## Installation\r\n### Dependencies\r\ni2c-tools\r\n\r\n### Edit raspi-config\r\nEnter `sudo raspi-config` and set the host name to a number ex 2223. This is used to represent the port number to distiguish it between the other clients on the server.\r\n\r\n\r\n### Edit Chron tab\r\nrun `crontab -e` to open the cron tab editor. Then add the following:\r\n```\r\n@reboot /home/pi/rollie/tools/boot.sh >> boot.log 2>&1\r\n\r\n*/1 * * * * ~/rollie/tools/connect_to_server.sh >> tunnel.log 2>&1\r\n```\r\n\r\n### BCIT Network Setup\r\nAdd the following to `sudo nano /etc/wpa_supplicant/wpa_supplicant.conf`\r\nMake sure to edit the user and password.\r\n```\r\nnetwork={\r\n        ssid=\"BCIT_Secure\"\r\n        key_mgmt=WPA-EAP\r\n        eap=PEAP\r\n        identity=\"a00######\"      <--- Here\r\n        password=\"super_secret\"   <--- And here\r\n        phase2=\"auth=MSCHAPV2\"\r\n}\r\n```\r\n\r\n### Remote Server\r\nTo be able to connect to the raspberrypi enter `pi1` on the server. This will auto connect to the raspberrypi provided that it has established a reverse ssh tunnel.\r\n\r\n### Connecting the IMU\r\nTo connect the IMU to the raspberry Pi connect the ground and 3.3V and connect the SCL and SCA to their respective inputs on the Pi. Follow this pinout for the PI.\r\n\r\n ![Raspberry Pi pinout](https://www.element14.com/community/servlet/JiveServlet/previewBody/73950-102-4-309126/GPIO_Pi2.png)\r\n\r\n## Hardware \r\n### Reading from the IMU\r\n#### Accelerometer reg map\r\n ![Accelerameter Register Map](http://www.aimagin.com/learn/images/thumb/2/2a/Using_i2c_master-example-adx345_register_map.PNG/800px-Using_i2c_master-example-adx345_register_map.PNG)\r\n \r\n#### Gyro reg map\r\n![Gyro Register Map](http://fixled.ru/image/data/Gyromap-s.jpg)\r\n\r\n### Stepper drivers\r\nhttps://www.pololu.com/product/1182\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}